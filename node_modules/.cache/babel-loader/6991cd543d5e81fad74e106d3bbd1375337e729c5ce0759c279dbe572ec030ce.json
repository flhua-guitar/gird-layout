{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport HelloWorld from \"./components/HelloWorld.vue\";\nimport HelloWorldA from \"./components/HelloWorldA.vue\";\nimport HelloWorldB from \"./components/HelloWorldB.vue\";\nimport testA from \"./components/testA.vue\";\nimport testB from \"./components/testB.vue\";\nimport { GridLayout, GridItem } from \"vue-grid-layout\";\nimport screenfull from \"screenfull\";\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld,\n    HelloWorldA,\n    HelloWorldB,\n    testA,\n    testB,\n    GridLayout: GridLayout,\n    GridItem: GridItem\n  },\n  data() {\n    return {\n      // 选择数据 --- start\n\n      options: [{\n        value: \"0\",\n        label: \"柱状统计数据\"\n      }, {\n        value: \"1\",\n        label: \"论坛统计数据\"\n      }, {\n        value: \"2\",\n        label: \"温度数据\"\n      }],\n      value: \"\",\n      // 选择数据 --- end\n\n      dialogVisible: false,\n      // 是否隐藏弹窗\n      flag1: true,\n      // 是否已显示柱状图  true为未显示\n      flag2: true,\n      // 是否已显示饼形图  true为未显示\n      flag3: true,\n      // 是否已显示线形图  true为未显示\n      isDraggable: false,\n      // 是否可拖拽\n      isResizable: false,\n      // 是否可缩放\n      activeObject: {\n        // 正在调整的方格item的宽高\n        width: 400,\n        height: 400\n      },\n      leftItemsData: [\n      // 左侧模块数据\n      {\n        id: 0,\n        title: \"柱状图\",\n        add: [{\n          x: 0,\n          y: 0,\n          w: 6,\n          h: 8,\n          i: 0,\n          index: \"g2-1\",\n          isShow: false,\n          flag: true\n        }]\n      }, {\n        id: 1,\n        title: \"饼形图\",\n        add: [{\n          x: 6,\n          y: 0,\n          w: 6,\n          h: 8,\n          i: 1,\n          index: \"g2-2\",\n          flag: true\n        }]\n      }, {\n        id: 2,\n        title: \"线形图\",\n        add: [{\n          x: 8,\n          y: 0,\n          w: 6,\n          h: 8,\n          i: 2,\n          index: \"g2-3\",\n          flag: true\n        }]\n      }, {\n        id: 3,\n        title: \"testA\",\n        add: [{\n          x: 14,\n          y: 0,\n          w: 6,\n          h: 8,\n          i: 3,\n          index: \"g2-4\",\n          flag: true\n        }]\n      }, {\n        id: 4,\n        title: \"testB\",\n        add: [{\n          x: 0,\n          y: 12,\n          w: 6,\n          h: 8,\n          i: 4,\n          index: \"g2-5\",\n          flag: true\n        }]\n      }],\n      layout: [\n        // { x: 3, y: 0, w: 3, h: 7, i: \"1\", index: \"g2-2\" },\n        // { x: 5, y: 0, w: 4, h: 6, i: \"2\", index: \"g2-3\" },\n      ]\n    };\n  },\n  mounted() {\n    console.log(\"g2-2\", this.$refs[\"g20\"][0].clientHeight);\n  },\n  methods: {\n    //自定义容器初始化\n    initDesign() {\n      let domstyleWidth = document.getElementById(\"grid-container\").offsetWidth - 12 * 10,\n        domstyleHeight = document.getElementById(\"grid-container\").offsetHeight / 8,\n        domContainer = document.getElementById(\"custom-design\"),\n        resWidth = domstyleWidth / 12,\n        everyWidth = (resWidth / domstyleWidth * 100).toFixed(2);\n      this.bjStyles = {\n        right: \"8px\",\n        background: \"linear-gradient(rgba(241, 243, 242, 1) 10px, transparent 0px) 0% 0%,\" + \"linear-gradient(to right, rgba(241, 243, 242, 1) 10px, transparent 0px) rgba(223, 232, 228, 1)\",\n        \"background-size\": `${everyWidth}% ${domstyleHeight}px`\n      };\n      this.rowheight = domstyleHeight - 10;\n      this.designLeft = domContainer.offsetLeft + 250;\n      this.designTop = domContainer.offsetTop + 70;\n    },\n    // 对应Vue生命周期的created\n    layoutCreatedEvent(newLayout) {\n      console.log(\"Created layout: \", newLayout);\n    },\n    // 对应Vue生命周期的beforeMount\n    layoutBeforeMountEvent(newLayout) {\n      console.log(\"beforeMount layout: \", newLayout);\n    },\n    // 对应Vue生命周期的mounted\n    layoutMountedEvent(newLayout) {\n      console.log(\"Mounted layout: \", newLayout);\n    },\n    // 调整大小后的事件\n    resizedEvent(i, newH, newW, newHPx, newWPx) {\n      this.activeObject.height = newHPx;\n      this.activeObject.width = newWPx;\n      if (i == 0) {\n        this.$refs.g20[0].changeG2();\n      } else if (i == 1) {\n        this.$refs.g21[0].changeG2();\n      } else if (i == 2) {\n        this.$refs.g22[0].changeG2();\n      }\n\n      // this.$refs.g20[0].forceFit();\n\n      console.log(\"RESIZE i=\" + i + \", H=\" + newH + \", W=\" + newW + \", H(px)=\" + newHPx + \", W(px)=\" + newWPx);\n    },\n    removeItem: function (val) {\n      const index = this.layout.map(item => item.i).indexOf(val);\n      console.log(\"layout\", this.layout);\n      this.layout.splice(index, 1);\n    },\n    // 点击编辑\n    edit() {\n      this.isDraggable = true;\n      this.isResizable = true;\n    },\n    // 点击保存\n    saveEdit() {\n      this.isDraggable = false;\n      this.isResizable = false;\n    },\n    // 点击左边栏获取id\n    getLeftItem(item) {\n      console.log(\"ididid\", item);\n      // this.mouseEnter();\n      window.ondragstart = ev => {\n        // ev.preventDefault();\n        console.log(\"ondragstart\", ev);\n      };\n      window.ondragend = ev => {\n        // ev.preventDefault();\n        // 判断是否已存在\n        const index = this.layout.map(item => item.i).indexOf(item.add[0].i);\n        console.log(\"indexindex\", index);\n        if (ev.clientX >= 220 && ev.clientY >= 120) {\n          if (index == -1) {\n            console.log(\"item.add\", item.add[0]);\n            this.layout.push(item.add[0]);\n          } else {\n            return this.$message({\n              message: \"已存在该模型，请勿重复拉取！\",\n              type: \"error\",\n              duration: 3000\n            });\n          }\n        }\n      };\n      window.ondragenter = ev => {\n        // 改变鼠标拖拽时图标\n        ev.preventDefault();\n      };\n      window.ondragover = ev => {\n        // 改变鼠标拖拽时图标\n        ev.preventDefault();\n      };\n    },\n    // 点击关闭\n    close(id) {},\n    // 点击确定\n    submit() {\n      let val = this.value;\n      if (val == 0 && this.flag1 == true) {\n        // console.log(\"this.flag1\", this);\n        this.flag1 = false;\n        this.layout.push({\n          x: 0,\n          y: 0,\n          w: 3,\n          h: 7,\n          i: val,\n          index: \"g2-1\",\n          isShow: false\n        });\n      } else if (val == 1 && this.flag2 == true) {\n        this.flag2 = false;\n        this.layout.push({\n          x: 8,\n          y: 0,\n          w: 3,\n          h: 7,\n          i: val,\n          index: \"g2-2\"\n        });\n      } else if (val == 2 && this.flag3 == true) {\n        this.flag3 = false;\n        this.layout.push({\n          x: 4,\n          y: 0,\n          w: 4,\n          h: 7,\n          i: val,\n          index: \"g2-3\"\n        });\n      } else {\n        return this.$message({\n          message: \"已存在该模型，请勿重复拉取！\",\n          type: \"error\",\n          duration: 3000\n        });\n      }\n      this.dialogVisible = false;\n    },\n    // 鼠标进入\n    mouseEnter() {},\n    // 点击关闭弹窗\n    handleClose() {\n      console.log(\"close\");\n    },\n    // 指定元素全屏\n    toggleFullScreen() {\n      if (screenfull.isEnabled) {\n        screenfull.toggle(this.$refs.addview);\n      }\n    }\n  }\n};","map":{"version":3,"names":["HelloWorld","HelloWorldA","HelloWorldB","testA","testB","GridLayout","GridItem","screenfull","name","components","data","options","value","label","dialogVisible","flag1","flag2","flag3","isDraggable","isResizable","activeObject","width","height","leftItemsData","id","title","add","x","y","w","h","i","index","isShow","flag","layout","mounted","console","log","$refs","clientHeight","methods","initDesign","domstyleWidth","document","getElementById","offsetWidth","domstyleHeight","offsetHeight","domContainer","resWidth","everyWidth","toFixed","bjStyles","right","background","rowheight","designLeft","offsetLeft","designTop","offsetTop","layoutCreatedEvent","newLayout","layoutBeforeMountEvent","layoutMountedEvent","resizedEvent","newH","newW","newHPx","newWPx","g20","changeG2","g21","g22","removeItem","val","map","item","indexOf","splice","edit","saveEdit","getLeftItem","window","ondragstart","ev","ondragend","clientX","clientY","push","$message","message","type","duration","ondragenter","preventDefault","ondragover","close","submit","mouseEnter","handleClose","toggleFullScreen","isEnabled","toggle","addview"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!--  :layout.sync=\"layout\"    //栅格的初始布局数据源。值必须为 `Array`，其数据项为 `Object`。 每条数据项必须有 `i, x, y, w 和 h` 属性。\n            :col-num=\"12\"            //定义栅格系统的列数，其值需为自然数。\n            :row-height=\"30\"         //每行的高度，单位像素。\n            :is-draggable=\"true\"     //标识栅格中的元素是否可拖拽。\n            :is-resizable=\"true\"     //标识栅格中的元素是否可调整大小。\n            :is-mirrored=\"false\"     //标识栅格中的元素是否可镜像反转。 (个人感觉镜像反转在实际应用中并不会常用)\n            :vertical-compact=\"true\" //标识布局是否垂直压缩。即行内垂直方向上顶端对齐\n            :margin=\"[10, 10]\"       //每个栅格之间的间距\n            :use-css-transforms=\"true\">   //标识是否使用CSS属性 `transition-property: transform;`\n     -->\n    <div class=\"header\">\n      <div class=\"headerBox\">\n        <button v-if=\"!isDraggable\" @click=\"edit()\">编辑</button>\n        <button v-else=\"!isDraggable\" @click=\"saveEdit()\">保存</button>\n      </div>\n      <div>\n        <button @click=\"toggleFullScreen()\">全屏</button>\n      </div>\n    </div>\n\n    <div class=\"views\">\n      <div class=\"viewsContainer\">\n        <div class=\"left\">\n          <div class=\"leftBox\">\n            <div class=\"leftItemBox\">\n              <div\n                class=\"leftItem\"\n                v-for=\"item in leftItemsData\"\n                :key=\"item.id\"\n                draggable=\"true\"\n                @mousedown=\"getLeftItem(item)\"\n                @dblclick=\"dialogVisible = true\"\n              >\n                {{ item.title }}\n              </div>\n            </div>\n          </div>\n          <!-- 弹窗 -->\n\n          <el-dialog\n            title=\"提示\"\n            :visible.sync=\"dialogVisible\"\n            width=\"30%\"\n            :before-close=\"handleClose\"\n          >\n            <!-- <span>这是一段信息</span> -->\n            <el-select v-model=\"value\" placeholder=\"请选择\">\n              <el-option\n                v-for=\"item in options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              >\n              </el-option>\n            </el-select>\n\n            <span slot=\"footer\" class=\"dialog-footer\">\n              <el-button @click=\"dialogVisible = false\">取 消</el-button>\n              <el-button type=\"primary\" @click=\"submit()\">确 定</el-button>\n            </span>\n          </el-dialog>\n\n          <!-- 弹窗 end -->\n        </div>\n        <div class=\"addview\" ref=\"addview\">\n          <grid-layout\n            :layout.sync=\"this.layout\"\n            :col-num=\"20\"\n            :row-height=\"60\"\n            :is-draggable=\"isDraggable\"\n            :is-resizable=\"isResizable\"\n            :is-mirrored=\"false\"\n            :vertical-compact=\"true\"\n            :margin=\"[10, 10]\"\n            :use-css-transforms=\"true\"\n            @layout-created=\"layoutCreatedEvent\"\n            @layout-before-mount=\"layoutBeforeMountEvent\"\n            @layout-mounted=\"layoutMountedEvent\"\n          >\n            <grid-item\n              :class=\"\n                isDraggable == false\n                  ? 'vue-grid-item'\n                  : 'vue-grid-item vue-grid-item-edit'\n              \"\n              v-for=\"item in this.layout\"\n              :x=\"item.x\"\n              :y=\"item.y\"\n              :w=\"item.w\"\n              :h=\"item.h\"\n              :i=\"item.i\"\n              :key=\"item.i\"\n              @resized=\"resizedEvent\"\n              id=\"gridItem\"\n            >\n              <button v-show=\"isDraggable\" @click=\"removeItem(item.i)\">\n                关闭\n              </button>\n              <div class=\"g2-1\" v-if=\"item.index == 'g2-1'\" ref=\"g2-1\">\n                <HelloWorld ref=\"g20\" :msg=\"activeObject\" />\n              </div>\n              <div class=\"g2-2\" v-if=\"item.index == 'g2-2'\" ref=\"g2-2\">\n                <HelloWorldA ref=\"g21\" :msg=\"activeObject\" />\n              </div>\n              <div class=\"g2-3\" v-if=\"item.index == 'g2-3'\" ref=\"g2-3\">\n                <HelloWorldB ref=\"g22\" :msg=\"activeObject\" />\n              </div>\n              <div class=\"g2-4\" v-if=\"item.index == 'g2-4'\" ref=\"g2-4\">\n                <testA ref=\"g23\"></testA>\n              </div>\n              <div class=\"g2-5\" v-if=\"item.index == 'g2-5'\" ref=\"g2-5\">\n                <testB ref=\"g24\"></testB>\n              </div>\n            </grid-item>\n          </grid-layout>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from \"./components/HelloWorld.vue\";\nimport HelloWorldA from \"./components/HelloWorldA.vue\";\nimport HelloWorldB from \"./components/HelloWorldB.vue\";\nimport testA from \"./components/testA.vue\";\nimport testB from \"./components/testB.vue\";\n\nimport { GridLayout, GridItem } from \"vue-grid-layout\";\nimport screenfull from \"screenfull\";\n\nexport default {\n  name: \"App\",\n  components: {\n    HelloWorld,\n    HelloWorldA,\n    HelloWorldB,\n    testA,\n    testB,\n    GridLayout: GridLayout,\n    GridItem: GridItem,\n  },\n  data() {\n    return {\n      // 选择数据 --- start\n\n      options: [\n        {\n          value: \"0\",\n          label: \"柱状统计数据\",\n        },\n        {\n          value: \"1\",\n          label: \"论坛统计数据\",\n        },\n        {\n          value: \"2\",\n          label: \"温度数据\",\n        },\n      ],\n      value: \"\",\n\n      // 选择数据 --- end\n\n      dialogVisible: false, // 是否隐藏弹窗\n      flag1: true, // 是否已显示柱状图  true为未显示\n      flag2: true, // 是否已显示饼形图  true为未显示\n      flag3: true, // 是否已显示线形图  true为未显示\n      isDraggable: false, // 是否可拖拽\n      isResizable: false, // 是否可缩放\n      activeObject: {\n        // 正在调整的方格item的宽高\n        width: 400,\n        height: 400,\n      },\n      leftItemsData: [\n        // 左侧模块数据\n        {\n          id: 0,\n          title: \"柱状图\",\n          add: [\n            {\n              x: 0,\n              y: 0,\n              w: 6,\n              h: 8,\n              i: 0,\n              index: \"g2-1\",\n              isShow: false,\n              flag: true,\n            },\n          ],\n        },\n        {\n          id: 1,\n          title: \"饼形图\",\n          add: [\n            {\n              x: 6,\n              y: 0,\n              w: 6,\n              h: 8,\n              i: 1,\n              index: \"g2-2\",\n              flag: true,\n            },\n          ],\n        },\n        {\n          id: 2,\n          title: \"线形图\",\n          add: [\n            {\n              x: 8,\n              y: 0,\n              w: 6,\n              h: 8,\n              i: 2,\n              index: \"g2-3\",\n              flag: true,\n            },\n          ],\n        },\n        {\n          id: 3,\n          title: \"testA\",\n          add: [\n            {\n              x: 14,\n              y: 0,\n              w: 6,\n              h: 8,\n              i: 3,\n              index: \"g2-4\",\n              flag: true,\n            },\n          ],\n        },\n        {\n          id: 4,\n          title: \"testB\",\n          add: [\n            {\n              x: 0,\n              y: 12,\n              w: 6,\n              h: 8,\n              i: 4,\n              index: \"g2-5\",\n              flag: true,\n            },\n          ],\n        },\n      ],\n      layout: [\n        // { x: 3, y: 0, w: 3, h: 7, i: \"1\", index: \"g2-2\" },\n        // { x: 5, y: 0, w: 4, h: 6, i: \"2\", index: \"g2-3\" },\n      ],\n    };\n  },\n  mounted() {\n    console.log(\"g2-2\", this.$refs[\"g20\"][0].clientHeight);\n  },\n\n  methods: {\n    //自定义容器初始化\n    initDesign() {\n      let domstyleWidth =\n          document.getElementById(\"grid-container\").offsetWidth - 12 * 10,\n        domstyleHeight =\n          document.getElementById(\"grid-container\").offsetHeight / 8,\n        domContainer = document.getElementById(\"custom-design\"),\n        resWidth = domstyleWidth / 12,\n        everyWidth = ((resWidth / domstyleWidth) * 100).toFixed(2);\n      this.bjStyles = {\n        right: \"8px\",\n        background:\n          \"linear-gradient(rgba(241, 243, 242, 1) 10px, transparent 0px) 0% 0%,\" +\n          \"linear-gradient(to right, rgba(241, 243, 242, 1) 10px, transparent 0px) rgba(223, 232, 228, 1)\",\n        \"background-size\": `${everyWidth}% ${domstyleHeight}px`,\n      };\n      this.rowheight = domstyleHeight - 10;\n      this.designLeft = domContainer.offsetLeft + 250;\n      this.designTop = domContainer.offsetTop + 70;\n    },\n    // 对应Vue生命周期的created\n    layoutCreatedEvent(newLayout) {\n      console.log(\"Created layout: \", newLayout);\n    },\n    // 对应Vue生命周期的beforeMount\n    layoutBeforeMountEvent(newLayout) {\n      console.log(\"beforeMount layout: \", newLayout);\n    },\n    // 对应Vue生命周期的mounted\n    layoutMountedEvent(newLayout) {\n      console.log(\"Mounted layout: \", newLayout);\n    },\n    // 调整大小后的事件\n    resizedEvent(i, newH, newW, newHPx, newWPx) {\n      this.activeObject.height = newHPx;\n      this.activeObject.width = newWPx;\n      if (i == 0) {\n        this.$refs.g20[0].changeG2();\n      } else if (i == 1) {\n        this.$refs.g21[0].changeG2();\n      } else if (i == 2) {\n        this.$refs.g22[0].changeG2();\n      }\n\n      // this.$refs.g20[0].forceFit();\n\n      console.log(\n        \"RESIZE i=\" +\n          i +\n          \", H=\" +\n          newH +\n          \", W=\" +\n          newW +\n          \", H(px)=\" +\n          newHPx +\n          \", W(px)=\" +\n          newWPx\n      );\n    },\n    removeItem: function (val) {\n      const index = this.layout.map((item) => item.i).indexOf(val);\n      console.log(\"layout\", this.layout);\n      this.layout.splice(index, 1);\n    },\n\n    // 点击编辑\n    edit() {\n      this.isDraggable = true;\n      this.isResizable = true;\n    },\n\n    // 点击保存\n    saveEdit() {\n      this.isDraggable = false;\n      this.isResizable = false;\n    },\n\n    // 点击左边栏获取id\n    getLeftItem(item) {\n      console.log(\"ididid\", item);\n      // this.mouseEnter();\n      window.ondragstart = (ev) => {\n        // ev.preventDefault();\n        console.log(\"ondragstart\", ev);\n      };\n      window.ondragend = (ev) => {\n        // ev.preventDefault();\n        // 判断是否已存在\n        const index = this.layout.map((item) => item.i).indexOf(item.add[0].i);\n        console.log(\"indexindex\", index);\n\n        if (ev.clientX >= 220 && ev.clientY >= 120) {\n          if (index == -1) {\n            console.log(\"item.add\", item.add[0]);\n            this.layout.push(item.add[0]);\n          } else {\n            return this.$message({\n              message: \"已存在该模型，请勿重复拉取！\",\n              type: \"error\",\n              duration: 3000,\n            });\n          }\n        }\n      };\n      window.ondragenter = (ev) => {\n        // 改变鼠标拖拽时图标\n        ev.preventDefault();\n      };\n      window.ondragover = (ev) => {\n        // 改变鼠标拖拽时图标\n        ev.preventDefault();\n      };\n    },\n\n    // 点击关闭\n    close(id) {},\n\n    // 点击确定\n    submit() {\n      let val = this.value;\n      if (val == 0 && this.flag1 == true) {\n        // console.log(\"this.flag1\", this);\n        this.flag1 = false;\n        this.layout.push({\n          x: 0,\n          y: 0,\n          w: 3,\n          h: 7,\n          i: val,\n          index: \"g2-1\",\n          isShow: false,\n        });\n      } else if (val == 1 && this.flag2 == true) {\n        this.flag2 = false;\n        this.layout.push({ x: 8, y: 0, w: 3, h: 7, i: val, index: \"g2-2\" });\n      } else if (val == 2 && this.flag3 == true) {\n        this.flag3 = false;\n        this.layout.push({ x: 4, y: 0, w: 4, h: 7, i: val, index: \"g2-3\" });\n      } else {\n        return this.$message({\n          message: \"已存在该模型，请勿重复拉取！\",\n          type: \"error\",\n          duration: 3000,\n        });\n      }\n      this.dialogVisible = false;\n    },\n\n    // 鼠标进入\n    mouseEnter() {},\n\n    // 点击关闭弹窗\n    handleClose() {\n      console.log(\"close\");\n    },\n    // 指定元素全屏\n    toggleFullScreen() {\n      if (screenfull.isEnabled) {\n        screenfull.toggle(this.$refs.addview);\n      }\n    },\n  },\n};\n</script>\n\n<style src=\"./css/app.scss\" lang=\"scss\"></style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}